81. Search in Rotated Sorted Array II

class Solution {
public:
    bool search(vector<int>& nums, int target) {
        int start = 0, end = nums.size()-1;
        if(nums.size())
        while(start <= end){
            int mid = (start + (end - start)/2);
            if(nums[mid] == target) return true;
            
            // to avoid duplicate
            if((nums[start] == nums[end]) && (nums[mid] == nums[end])){
                start++, end--;
            }
            //if left part is sorted
            else if(nums[start] <= nums[mid]){
                //check if element is present in the left part
                if(target >= nums[start] && target < nums[mid]){
                    end = mid - 1;          // if it is, bring end to left part
                }
                //if not, then check right part
                else{
                    start = mid +1;            // bring start to right part
                }
            }
            
            //else right part is sorted
            else{
                //check if element is present in right part
                if(target > nums[mid] && target <= nums[end]){
                    start = mid +1;         //bring start into right part
                }
                else{
                    end = mid -1;          // else bring end to left part
                }
            }
        }
        
        return false;
    }
};
