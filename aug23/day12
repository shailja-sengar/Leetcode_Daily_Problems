63. Unique Paths II

class Solution {
public:
//using recursion
    // int funRec(int row, int col, vector<vector<int>>&arr){
    //     if(row==0 && col == 0)
    //         return 1;
        
    //     if(row<0 || col < 0 || arr[row][col] == 1)
    //         return 0;

    //     int up = funRec(row-1, col, arr);
    //     int left = funRec(row, col-1, arr);

    //     return up+left;
    // }

    //memoization
    // int funMemo(int row, int col, vector<vector<int>>&arr, vector<vector<int>>&dp){
    //     if(row==0 && col==0)
    //         return 1;

    //     if(row < 0 || col < 0 || arr[row][col] == 1)
    //         return 0;

    //     if(dp[row][col] != -1)
    //         return dp[row][col];

    //     int up = funMemo(row-1, col, arr, dp);
    //     int left = funMemo(row, col-1, arr, dp);

    //     return dp[row][col] = up+left;
    // }

    //Tabulation
    int funTabu(int row, int col, vector<vector<int>>&arr, vector<vector<int>>&dp){
        for(int i=0; i<row; i++){
            for(int j=0; j<col; j++){
                if(arr[i][j] == 1)
                {
                    dp[i][j] = 0;
                    
                } 
                //base case
                else if(i==0 && j==0 ){
                    dp[i][j] = 1;
                    
                }
                              
              else{
                int up =0;
                if(i-1 >= 0)
                    up = dp[i-1][j];
                int left = 0;
                if(j-1 >= 0)
                    left = dp[i][j-1];

                dp[i][j] = (up+left);
                }
            }
        }
         return dp[row-1][col-1];
    }
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int m = obstacleGrid.size();
        int n = obstacleGrid[0].size();
        if(obstacleGrid[0][0] == 1)
            return 0;

        //using recursion
        //return funRec(m-1, n-1, obstacleGrid);

        //memoization
        // vector<vector<int>>dp(m, vector<int>(n, -1));
        // return funMemo(m-1, n-1, obstacleGrid, dp);

        //tabulation
        vector<vector<int>>dp(m, vector<int>(n, -1));
        return funTabu(m, n, obstacleGrid, dp);
    }
};
